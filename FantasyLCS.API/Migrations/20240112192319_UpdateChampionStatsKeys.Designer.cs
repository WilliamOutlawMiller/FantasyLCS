// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyLCS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240112192319_UpdateChampionStatsKeys")]
    partial class UpdateChampionStatsKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DataUpdateLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("DataUpdateLogs");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.FullStats", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Assists")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Assists");

                    b.Property<string>("CS")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CS");

                    b.Property<string>("CSD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CSD@15");

                    b.Property<string>("CSEnemyJG")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CS in Enemy Jungle");

                    b.Property<string>("CSM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CSM");

                    b.Property<string>("CSTeamJG")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CS in Team's Jungle");

                    b.Property<string>("Champion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Champion");

                    b.Property<string>("ConsumablesPurchased")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Consumables purchased");

                    b.Property<string>("ControlWardsPerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "VWPM");

                    b.Property<string>("ControlWardsPlaced")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Detector Wards Placed");

                    b.Property<string>("ControlWardsPurchased")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Control Wards Purchased");

                    b.Property<string>("DPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "DPM");

                    b.Property<string>("DamagePercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "DMG%");

                    b.Property<string>("DamageSelfMitigated")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Damage self mitigated");

                    b.Property<string>("Deaths")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Deaths");

                    b.Property<string>("DmgToBuildings")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Damage dealt to buildings");

                    b.Property<string>("DmgToTurrets")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Damage dealt to turrets");

                    b.Property<string>("DoubleKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Double kills");

                    b.Property<string>("GD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "GD@15");

                    b.Property<string>("GPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "GPM");

                    b.Property<string>("Gold")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Golds");

                    b.Property<string>("GoldPercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "GOLD%");

                    b.Property<string>("ItemsPurchased")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Items Purchased");

                    b.Property<string>("KDA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "KDA");

                    b.Property<string>("KillPercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "KP%");

                    b.Property<string>("Kills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Kills");

                    b.Property<string>("KillsPlusAssistsPerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "K+A Per Minute");

                    b.Property<string>("LVLD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "LVLD@15");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Level");

                    b.Property<string>("MagicDamage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Magic Damage");

                    b.Property<int?>("MatchID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Player");

                    b.Property<string>("ObjectivesStolen")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Objectives Stolen");

                    b.Property<string>("PentaKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Penta kills");

                    b.Property<string>("PhysicalDamage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Physical Damage");

                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuadraKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Quadra kills");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Role");

                    b.Property<string>("ShutdownBountyCollected")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Shutdown bounty collected");

                    b.Property<string>("ShutdownBountyLost")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Shutdown bounty lost");

                    b.Property<string>("SoloKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Solo kills");

                    b.Property<string>("TimeCCingOthers")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Time ccing others");

                    b.Property<string>("TotalDamageShieldedOnTeammates")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total Damage Shielded On Teammates");

                    b.Property<string>("TotalDamageTaken")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total damage taken");

                    b.Property<string>("TotalDamageToChampions")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total damage to Champion");

                    b.Property<string>("TotalHeal")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total heal");

                    b.Property<string>("TotalHealOnTeammates")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total Heals On Teammates");

                    b.Property<string>("TotalTimeCCDealt")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total Time CC Dealt");

                    b.Property<string>("TotalTimeSpentDead")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Total Time Spent Dead");

                    b.Property<string>("TripleKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Triple kills");

                    b.Property<string>("TrueDamage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "True Damage");

                    b.Property<string>("VisionScore")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Vision Score");

                    b.Property<string>("VisionScorePerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "VSPM");

                    b.Property<string>("VisionScorePercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "VS%");

                    b.Property<string>("WardsDestroyed")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Wards destroyed");

                    b.Property<string>("WardsKilledPerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "WCPM");

                    b.Property<string>("WardsPerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "WPM");

                    b.Property<string>("WardsPlaced")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Wards placed");

                    b.Property<string>("XPD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "XPD@15");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.ToTable("FullStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.Match", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.AggressionStats", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Damage Per Minute");

                    b.Property<string>("DamagePercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Damage%");

                    b.Property<string>("KAPerMinute")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "K+A Per Minute");

                    b.Property<string>("Pentakills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Pentakills");

                    b.Property<string>("SoloKills")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Solo kills");

                    b.HasKey("PlayerID");

                    b.ToTable("AggressionStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.ChampionStats", b =>
                {
                    b.Property<int>("ChampionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Champion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Champion");

                    b.Property<string>("GamesPlayed")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Nb games");

                    b.Property<string>("KDA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "KDA");

                    b.Property<string>("WinRate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Win Rate");

                    b.HasKey("ChampionID", "PlayerID");

                    b.HasIndex("PlayerID");

                    b.ToTable("ChampionStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.EarlyGameStats", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AheadInCSAt15Percent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Ahead in CS at 15 min");

                    b.Property<string>("CSD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CS Differential at 15 min");

                    b.Property<string>("FirstBloodParticipantPercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "First Blood Participation");

                    b.Property<string>("FirstBloodVictimPercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "First Blood Victim");

                    b.Property<string>("GD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Gold Differential at 15 min");

                    b.Property<string>("XPD15")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "XP Differential at 15 min");

                    b.HasKey("PlayerID");

                    b.ToTable("EarlyGameStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.GeneralStats", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CsPerMin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "CS per Minute");

                    b.Property<string>("GoldPerMin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Gold Per Minute");

                    b.Property<string>("GoldPercent")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Gold%");

                    b.Property<string>("KDA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "KDA");

                    b.Property<string>("KillParticipation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Kill Participation");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Record");

                    b.Property<string>("WinRate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Win Rate");

                    b.HasKey("PlayerID");

                    b.ToTable("GeneralStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.VisionStats", b =>
                {
                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VSPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Vision score Per Minute");

                    b.Property<string>("VWPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Vision Ward Per Minute");

                    b.Property<string>("WCPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Ward Cleared Per Minute");

                    b.Property<string>("WPM")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "Ward Per Minute");

                    b.HasKey("PlayerID");

                    b.ToTable("VisionStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Losses")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerIDs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubIDs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.FullStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Match", null)
                        .WithMany("FullStats")
                        .HasForeignKey("MatchID");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.AggressionStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Player", "Player")
                        .WithOne("AggressionStats")
                        .HasForeignKey("FantasyLCS.DataObjects.PlayerStats.AggressionStats", "PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.ChampionStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Player", "Player")
                        .WithMany("ChampionStats")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.EarlyGameStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Player", "Player")
                        .WithOne("EarlyGameStats")
                        .HasForeignKey("FantasyLCS.DataObjects.PlayerStats.EarlyGameStats", "PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.GeneralStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Player", "Player")
                        .WithOne("GeneralStats")
                        .HasForeignKey("FantasyLCS.DataObjects.PlayerStats.GeneralStats", "PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.PlayerStats.VisionStats", b =>
                {
                    b.HasOne("FantasyLCS.DataObjects.Player", "Player")
                        .WithOne("VisionStats")
                        .HasForeignKey("FantasyLCS.DataObjects.PlayerStats.VisionStats", "PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.Match", b =>
                {
                    b.Navigation("FullStats");
                });

            modelBuilder.Entity("FantasyLCS.DataObjects.Player", b =>
                {
                    b.Navigation("AggressionStats")
                        .IsRequired();

                    b.Navigation("ChampionStats");

                    b.Navigation("EarlyGameStats")
                        .IsRequired();

                    b.Navigation("GeneralStats")
                        .IsRequired();

                    b.Navigation("VisionStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
