@page
@model FantasyLCS.WebApp.Pages.MatchesModel
@{
    ViewData["Title"] = "Matches";
}

<script>
    function toggleDropdown(element) {
        // Find the score dropdown within the clicked match section
        const dropdown = element.querySelector('.score-dropdown');
        // Toggle the display property
        dropdown.style.display = dropdown.style.display === 'none' ? 'flex' : 'none';
    }
</script>

<style>
    /* Matches page container and layout styles */
    .matches-container {
        display: flex;
        flex-direction: column; /* Stack match entries vertically */
        padding: 20px;
        gap: 20px;
    }

    .match-section {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 15px;
    }

    .match-entry {
        display: flex;
        align-items: center;
        justify-content: space-between; /* This will put space between the flex items */
    }

    /* Last child shouldn't have a border-bottom */
    .match-entry:last-child {
        border-bottom: none;
    }

    .match-logo-container {
        /* Increase size of the logos */
        width: 100px; /* Adjust width as needed */
        height: 100px; /* Adjust height as needed */
        background-size: cover;
        background-position: center;
        margin: 10px; /* Add margin around logos */
    }

    .match-info {
        /* Make sure this div doesn't grow to push the logos apart */
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: auto; /* Adjust the basis according to the content */
        flex-direction: column; /* Stack date and score vertically */
        order: 2; /* This will ensure that match-info is in the center */
        text-align: center; /* Center the text inside this div */
        display: flex;
        justify-content: center; /* Center items vertically */
        align-items: center; /* Center items horizontally */
    }

    .match-date {
        font-size: 14px; /* Adjust font size as needed for the date */
        margin-bottom: 5px; /* Space between the date and the score */
    }

    .match-score {
        font-size: 24px; /* Increase font size for the score */
        font-weight: bold; /* Make the score bold */
        color: #333; /* Adjust color as needed for better visibility */
    }

    .team-logo-left, .team-logo-right {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .team-logo-left {
        margin-right: auto;
        order: 1; /* This will ensure that team-logo-left is the first item */
    }

    .team-logo-right {
        margin-left: auto;
        order: 3; /* This will ensure that team-logo-right is the last item */
    }

    /* Style for the week header */
    .week-header {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px; /* Space before the match entries */
    }

    .winner-info {
        font-weight: bold;
        color: green; /* Adjust color as needed */
    }

    .score-dropdown {
        display: none; /* Initially hide the dropdown */
        flex-direction: row; /* Align team scores side by side */
        gap: 10px;
        justify-content: space-between; /* Align team scores on opposite ends */
        padding: 10px;
        background-color: #f1f1f1; /* Light background for the dropdown */
        border-radius: 5px;
        margin-top: 10px; /* Space between match entry and scores */
    }

    .team-scores {
        display: flex;
        flex-direction: column; /* Stack scores vertically */
        width: 50%; /* Half the width for each team */
        padding: 0 10px; /* Padding on the sides */
    }

    .player-score {
        background-color: #ffffff;
        margin: 5px 0; /* Space between player scores */
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Soft shadow for each score */
        display: flex;
        justify-content: space-between; /* Align the name and score */
        padding: 10px;
    }

    .team-one .player-score {
        flex-direction: row; /* Keep the name on the left and score on the right */
    }

    .team-two .player-score {
        display: flex;
        justify-content: space-between; /* This will ensure the score and name are on opposite ends */
    }

    .team-two .player-score span:first-child {
        margin-right: 10px; /* This will ensure there is space between the score and the name */
    }

    /* Typography styles can be adjusted to fit the Matches page context */
    h2, h3 {
        font-size: 20px; /* Adjusted for visual hierarchy */
        margin: 15px 0; /* Space above and below headings */
    }

    p {
        font-size: 16px; /* Adjusted for readability */
    }
</style>

<div class="home-container">
    <section class="league-info-section">
        <h2>@Model.HomePage.UserLeague.Name League Matches</h2>
        <div class="matches-container">
            @foreach (var weekGroup in Model.Matches.GroupBy(m => m.Week).OrderBy(g => g.Key))
            {
                <div class="week-header">@weekGroup.Key</div>
                @foreach (var match in weekGroup.OrderBy(m => m.MatchDate))
                {
                    <div class="match-section" onclick="toggleDropdown(this)">
                        <div class="match-entry">
                            <div class="match-logo-container team-logo-left" style="background-image: url('@match.TeamOne.LogoUrl');"></div>

                            <div class="match-info">
                                <p class="match-date">@match.MatchDate.ToShortDateString()</p>
                                @switch (match.Winner)
                                {
                                    case Winner.TeamOne:
                                        <p class="match-score">1 - 0</p>
                                        break;
                                    case Winner.TeamTwo:
                                        <p class="match-score">0 - 1</p>
                                        break;
                                    case Winner.NotPlayed:
                                        <p class="match-score">0 - 0</p>
                                        break;
                                }
                            </div>

                            <div class="match-logo-container team-logo-right" style="background-image: url('@match.TeamTwo.LogoUrl');"></div>
                        </div>

                        <div class="score-dropdown" id="scores-@match.ID">
                            <!-- Team One Scores -->
                            <div class="team-scores team-one">
                                @foreach (var score in Model.LeagueMatchScores.Where(s => s.Key.Item1 == match.ID && Model.HomePage.LeagueDraftPlayers.Any(dp => dp.TeamID == match.TeamOneID && dp.ID == s.Key.Item2)))
                                {
                                    <div class="player-score">
                                        <span>@Model.HomePage.LeagueDraftPlayers.FirstOrDefault(dp => dp.ID == score.Key.Item2)?.Name</span>
                                        <span>@score.Value.FinalScore.ToString("0.0")</span>
                                    </div>
                                }
                            </div>

                            <!-- Team Two Scores -->
                            <div class="team-scores team-two">
                                @foreach (var score in Model.LeagueMatchScores.Where(s => s.Key.Item1 == match.ID && Model.HomePage.LeagueDraftPlayers.Any(dp => dp.TeamID == match.TeamTwoID && dp.ID == s.Key.Item2)))
                                {
                                    <div class="player-score">
                                        <!-- Score is now placed before the name -->
                                        <span>@score.Value.FinalScore.ToString("0.0")</span>
                                        <span>@Model.HomePage.LeagueDraftPlayers.FirstOrDefault(dp => dp.ID == score.Key.Item2)?.Name</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </section>
    <!-- Other sections -->
</div>
