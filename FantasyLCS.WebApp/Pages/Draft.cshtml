@page
@model FantasyLCS.WebApp.Pages.DraftModel
@{
    ViewData["Title"] = "Draft Page";
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5000/draftHub") // URL of the DraftHub
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.on("DraftStarted", function () {
            // Logic to update UI when draft starts
            updateDraftUI();
        });

        connection.on("PlayerDrafted", function (draftPlayer) {
            // Logic to handle a player being drafted
            playerDrafted(draftPlayer);
        });

        connection.on("UpdateCurrentTeam", function (currentTeam) {
            updateCurrentTeamUI(currentTeam);
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        function updateDraftUI() {
            const teamLogoContainer = document.querySelector('.team-logo-container');
            const teamDetails = document.querySelector('.team-details');

            // Update the team info
            if (currentTeam) {
                teamLogoContainer.style.backgroundImage = `url('${currentTeam.LogoUrl}')`;
                teamDetails.innerHTML = `
                    <p><strong>${currentTeam.Name}</strong></p>
                    <p>Coach: ${currentTeam.OwnerName}</p>
                    <p>Wins: ${currentTeam.Wins}, Losses: ${currentTeam.Losses}</p>
                `;
            }
        }

        function updateCurrentTeamUI(currentTeam) {
            // Check if currentTeam data is available
            if (!currentTeam) {
                console.error('Current team data is not available');
                return;
            }

            // Update the team logo and details
            const teamLogoContainer = document.querySelector('.team-logo-container');
            const teamDetails = document.querySelector('.team-details');

            if (teamLogoContainer && teamDetails) {
                teamLogoContainer.style.backgroundImage = `url('${currentTeam.LogoUrl}')`;
                teamDetails.innerHTML = `
                    <p><strong>${currentTeam.Name}</strong></p>
                    <p>Coach: ${currentTeam.OwnerName}</p>
                    <p>Wins: ${currentTeam.Wins}, Losses: ${currentTeam.Losses}</p>
                `;
            } else {
                console.error('Team logo container or team details element not found');
            }
        }

        function playerDrafted(draftPlayer) {
            // Grey out the player's card and prevent further clicks
            const draftedPlayerCard = document.getElementById(`player-card-${draftPlayer.ID}`);
            if (draftedPlayerCard) {
                draftedPlayerCard.classList.add('drafted');
                draftedPlayerCard.onclick = null; // Remove click event
            }
        }

        async function startDraft() {
            console.log("Start draft clicked. League ID:", @Model.League.ID);
            try {
                await connection.invoke("StartDraft", @Model.League.ID);
                console.log("Start draft invoked");
            } catch (err) {
                console.error("Error in startDraft:", err);
            }
        }

        let selectedPlayerId = null;

        function selectPlayer(playerId) {
            selectedPlayerId = playerId;
            document.getElementById("confirmPickButton").disabled = false;

            // Add visual indication for the selected player card
            const playerCards = document.querySelectorAll('.player-card');
            playerCards.forEach(card => {
                card.classList.remove('selected');
            });
            document.getElementById(`player-card-${playerId}`).classList.add('selected');
        }

        async function confirmDraftPick() {
            if (selectedPlayerId) {
                try {
                    await connection.invoke("PlayerDrafted", @Model.League.ID, selectedPlayerId);
                    selectedPlayerId = null;
                    document.getElementById("confirmPickButton").disabled = true;
                } catch (err) {
                    console.error(err);
                }
            }
        }
    </script>
}

<style>
    /* Include only the relevant styles from home.cshtml */
    .teaminfo-section {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 15px;
    }

    .team-details p {
        margin: 5px 0;
        color: #ffffff; /* Text color for placeholder */
    }

    .team-details strong {
        color: #ffffff;
    }

    .team-logo-container {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-size: cover;
        background-position: left;
        background-repeat: no-repeat;
        margin: 10px auto;
    }

    .team-placeholder {
        display: flex;
        justify-content: center;
    }

    .team-details {
        text-align: center;
    }

    .team-details p {
        margin: 5px 0;
    }

    .team-details strong {
        font-weight: 600;
    }

    .player-card {
        cursor: pointer;
        border: 1px solid #ddd;
        padding: 10px;
        margin: 5px;
        text-align: center;
    }

    .player-card img {
        width: 100px; /* Adjust as needed */
        height: 100px; /* Adjust as needed */
        border-radius: 50%;
    }

    .player-card.selected {
        border-color: mediumseagreen;
    }

    .player-card.drafted {
        background-color: #cccccc; /* Or any color indicating the player is drafted */
        cursor: default;
    }

    .btn {
        background-color: mediumseagreen;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        width: 200px;
        margin-top: 10px;
        cursor: pointer;
    }

    .btn:not(.btn-disabled):hover {
        background-color: mediumaquamarine;
    }

    .btn-disabled {
        background-color: #cccccc;
        color: #666666;
        cursor: default;
    }

</style>

<div class="validation-summary">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
</div>

<div class="teaminfo-section">
    @if (Model.CurrentTeam == null)
    {
        <div class="team-placeholder">
            <form method="post">
                <button class="btn @(Model.League.LeagueStatus == LeagueStatus.NotStarted
                        && Model.League.Owner.ToLower().Equals(User.Identity.Name.ToLower()) ? "" : "btn-disabled")"
                        onclick="startDraft()" type="button">
                        Start Draft
                </button>
            </form>
        </div>
    }
    else
    {
        <div class="team-logo-container" style="background-image: url('@Model.CurrentTeam.LogoUrl');"></div>
        <div class="team-details">
            <p><strong>@Model.CurrentTeam.Name</strong></p>
            <p>Coach: @Model.CurrentTeam.OwnerName</p>
            <p>Wins: @Model.CurrentTeam.Wins, Losses: @Model.CurrentTeam.Losses</p>
        </div>

        <button class="btn btn-disabled" id="confirmPickButton" onclick="confirmDraftPick()" disabled>Confirm Pick</button>
    } 
</div>

<div class="player-section">
    @if (Model.League.LeagueStatus != LeagueStatus.DraftInProgress)
    {
        <div class="player-placeholder">
        </div>
    }
    else
    {
        @foreach (var position in Enum.GetValues(typeof(Position)))
        {
            <div class="player-group">
                <h3>@position</h3>
                @foreach (var player in Model.DraftPlayers.Where(p => p.Position.Equals(position)))
                {
                    <div class="player-card" id="player-card-@player.ID" onclick="selectPlayer(@player.ID)">
                        <img src="@player.ImagePath" alt="@player.Name" />
                        <p>@player.Name</p>
                    </div>
                }
            </div>
        }
    }
</div>
                        