@page
@model FantasyLCS.WebApp.Pages.DraftModel
@{
    ViewData["Title"] = "Draft Page";
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5000/draftHub") // URL of the DraftHub
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(() => {
            console.log("Connected to hub");
            connection.invoke("JoinGroup", @Model.League.ID)
                .then(() => {
                    console.log("Joined group");
                    // Fetch the current draft state
                    connection.invoke("GetCurrentDraftState", @Model.League.ID);
                })
                .catch(err => console.error(err));
        }).catch(function (err) {
            console.error("Error establishing connection:", err.toString());
        });

        connection.on("UpdateDraftState", function (draftState) {
            console.log("UpdateDraftState hit")
            console.log(draftState.leagueStatus)
            if (draftState.leagueStatus === 1) {
                console.log("Page updated with current draft state")

                updateDraftUI();
                console.log("Draft UI updated")

                updateCurrentTeamUI(draftState.currentTeam);
                console.log("Team UI updated")


                // Grey out drafted players
                draftState.draftedPlayerIDs.forEach(id => {
                    const draftedPlayerCard = document.getElementById(`player-card-${id}`);
                    if (draftedPlayerCard) {
                        draftedPlayerCard.classList.add('drafted');
                        draftedPlayerCard.onclick = null; // Remove click event
                    }
                });

                // Additional logic for handling available players can be added here
            }
        });

        connection.on("DraftStarted", function () {
            // Logic to update UI when draft starts
            updateDraftUI();
        });

        connection.on("PlayerDrafted", function (draftUpdate) {
            // Logic to handle a player being drafted
            playerDrafted(draftUpdate.draftPlayerID);
            updateCurrentTeamUI(draftUpdate.nextTeam);
        });

        connection.on("UpdateCurrentTeam", function (currentTeam) {
            updateCurrentTeamUI(currentTeam);
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        function updateDraftUI() {
            // Hide the 'Start Draft' button and show the 'Confirm Pick' button
            document.getElementById('startDraftButton').style.display = 'none';
            document.getElementById('confirmPickButton').style.display = 'block';

            const teamLogoContainer = document.querySelector('.team-logo-container');
            const teamDetails = document.querySelector('.team-details');

            // Show the team logo and details containers
            teamLogoContainer.style.display = 'block';
            teamDetails.style.display = 'block';

            // Show the player section
            document.querySelector('.player-section').style.display = 'block';
        }

        function updateCurrentTeamUI(currentTeam) {
            if (!currentTeam) {
                console.error('Current team data is not available');
                return;
            }

            const teamLogoContainer = document.querySelector('.team-logo-container');
            const teamDetails = document.querySelector('.team-details');

            teamLogoContainer.style.backgroundImage = `url('${currentTeam.LogoUrl}')`;
            teamDetails.innerHTML = `
                <p><strong>${currentTeam.Name}</strong></p>
                <p>Coach: ${currentTeam.OwnerName}</p>
                <p>Wins: ${currentTeam.Wins}, Losses: ${currentTeam.Losses}</p>
            `;
        }

        function playerDrafted(draftPlayerID) {
            // Grey out the player's card and prevent further clicks
            const draftedPlayerCard = document.getElementById(`player-card-${draftPlayerID}`);
            if (draftedPlayerCard) {
                draftedPlayerCard.classList.add('drafted');
                draftedPlayerCard.onclick = null; // Remove click event
            }
        }

        async function startDraft() {
            if (connection.state === signalR.HubConnectionState.Connected) {
                try {
                    await connection.invoke("StartDraft", @Model.League.ID);
                } catch (err) {
                    console.error("Error in startDraft:", err);
                }
            } else {
                console.error("Connection not established");
            }
        }

        let selectedPlayerId = null;

        function selectPlayer(playerId) {
            selectedPlayerId = playerId;
            document.getElementById("confirmPickButton").disabled = false;

            // Add visual indication for the selected player card
            const playerCards = document.querySelectorAll('.player-card');
            playerCards.forEach(card => {
                card.classList.remove('selected');
            });
            document.getElementById(`player-card-${playerId}`).classList.add('selected');
        }

        async function confirmDraftPick() {
            if (selectedPlayerId) {
                try {
                    await connection.invoke("PlayerDrafted", @Model.League.ID, selectedPlayerId);
                    selectedPlayerId = null;
                    document.getElementById("confirmPickButton").disabled = true;
                } catch (err) {
                    console.error(err);
                }
            }
        }
    </script>
}

<style>
    /* Include only the relevant styles from home.cshtml */
    .teaminfo-section {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 15px;
    }

    .team-details p {
        margin: 5px 0;
        color: #ffffff; /* Text color for placeholder */
    }

    .team-details strong {
        color: #ffffff;
    }

    .team-logo-container {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-size: cover;
        background-position: left;
        background-repeat: no-repeat;
        margin: 10px auto;
    }

    .team-placeholder {
        display: flex;
        justify-content: center;
    }

    .team-details {
        text-align: center;
    }

    .team-details p {
        margin: 5px 0;
    }

    .team-details strong {
        font-weight: 600;
    }

    .player-card {
        cursor: pointer;
        border: 1px solid #ddd;
        padding: 10px;
        margin: 5px;
        text-align: center;
    }

    .player-card img {
        width: 100px; /* Adjust as needed */
        height: 100px; /* Adjust as needed */
        border-radius: 50%;
    }

    .player-card.selected {
        border-color: mediumseagreen;
    }

    .player-card.drafted {
        background-color: #cccccc; /* Or any color indicating the player is drafted */
        cursor: default;
    }

    .btn {
        background-color: mediumseagreen;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        width: 200px;
        margin-top: 10px;
        cursor: pointer;
    }

    .btn:not(.btn-disabled):hover {
        background-color: mediumaquamarine;
    }

    .btn-disabled {
        background-color: #cccccc;
        color: #666666;
        cursor: default;
    }

</style>

<div class="validation-summary">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
</div>

<div class="teaminfo-section">
    <div class="team-placeholder">
        <button class="btn" onclick="startDraft()" type="button" id="startDraftButton">
            Start Draft
        </button>
    </div>
    <div class="team-logo-container" style="display: none;"></div>
    <div class="team-details" style="display: none;"></div>
    <button class="btn btn-disabled" id="confirmPickButton" onclick="confirmDraftPick()" disabled style="display: none;">Confirm Pick</button>
</div>


<div class="player-section" style="display: none;">
    <!-- Initially hidden -->
    @foreach (var position in Enum.GetValues(typeof(Position)))
    {
        <div class="player-group">
            <h3>@position</h3>
            @foreach (var player in Model.DraftPlayers.Where(p => p.Position.Equals(position)))
            {
                <div class="player-card" id="player-card-@player.ID" onclick="selectPlayer(@player.ID)">
                    <img path="@player.ImagePath" alt="@player.Name" />
                    <p>@player.Name</p>
                </div>
            }
        </div>
    }
</div>           